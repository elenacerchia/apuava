/*
 * Copyright 2016 WisePersist.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // https://plugins.gradle.org/plugin/com.github.kt3k.coveralls
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
        // https://github.com/aaschmid/gradle-cpd-plugin
        classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.5'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'org.wisepersist'
archivesBaseName = 'apuava'
version = '1.0.3-SNAPSHOT'

def skip_quality_check = project.hasProperty('check') && check == 'false'
println("skip_quality_check: " + skip_quality_check)

if (!skip_quality_check) {
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/pmd.gradle"
    apply from: "$rootDir/gradle/cpd.gradle"
    apply from: "$rootDir/gradle/findbugs.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

project.extensions.idea.module.iml {
    withXml {
        it.asNode().component.
                find { it.@name == 'NewModuleRootManager' }.@LANGUAGE_LEVEL = target.level
    }
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()

        // force certain versions of dependencies (including transitive)
        //  *append new forced modules:
        force 'xml-apis:xml-apis:1.4.01',
              'org.slf4j:slf4j-api:1.7.6',
              'com.google.guava:guava:19.0',
              'commons-logging:commons-logging:1.1.3',
              'commons-lang:commons-lang3:3.3'
    }
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

dependencies {
    // DI
    compile 'com.google.inject:guice:4.1.0'

    // Utilities
    compile 'com.google.guava:guava:19.0'
    compile 'xml-apis:xml-apis:1.4.01'
    compile 'org.apache.commons:commons-lang3:3.3'
    compile 'commons-io:commons-io:2.5'

    // FindBugs annotations
    compile 'com.google.code.findbugs:annotations:3.0.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.6'

    // test dependencies
    testCompile 'ch.qos.logback:logback-core:1.1.1'
    testCompile 'ch.qos.logback:logback-classic:1.1.1'

    /*
      This is required by logback confitional processing, for more info please
      see: http://logback.qos.ch/setup.html#janino

      The org.codehaus.janino:commons-compiler:2.6.1 dependency will be
      automatically pulled in by Maven's transitivity rules
    */
    testCompile 'org.codehaus.janino:janino:2.6.1'

    testCompile 'com.google.inject.extensions:guice-servlet:4.1.0'
    testCompile 'org.eclipse.jetty.aggregate:jetty-all:8.1.22.v20160922'
    testCompile 'org.mockito:mockito-core:2.0.80-beta'
    testCompile 'org.testng:testng:6.8.8'
}

build {
    doFirst {
        delete 'out'
    }
}

ext.userHome = System.getProperty("user.home")

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-sourcepath", ""]
}

javadoc {
    // Avoid error: cannot access external classes
    options.addStringOption("sourcepath", "")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'WisePersist AppConfig'
                packaging 'jar'
                description 'WisePersist AppConfig is a utility module which simplifies application configurations against different environments - test, dev, stage and prod.'
                url 'http://appconfig.wisepersist.org/'

                scm {
                    connection 'scm:git:git@github.com:jiakuan/wisepersist-appconfig.git'
                    developerConnection 'scm:git:git@github.com:jiakuan/wisepersist-appconfig.git'
                    url 'git@github.com:jiakuan/wisepersist-appconfig.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jiakuan'
                        name 'Jiakuan Wang'
                        email 'jiakuan.wang@gmail.com'
                        organization 'WisePersist.org'
                        organizationUrl 'http://appconfig.wisepersist.org'
                        roles {
                            role 'architect'
                            role 'developer'
                        }
                        timezone '+8'
                    }
                }
            }
        }
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: "file://${userHome}/Dropbox/Public/mvn-repo/")
//        }
//    }
//}

task createPom << {
    pom {
        project {
            packaging 'jar'
            build {
                plugins {
                    plugin {
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '3.1'
                        configuration {
                            source '1.7'
                            target '1.7'
                            encoding 'UTF-8'
                        }
                    }
                }
            }
        }
    }.writeTo("$projectDir/pom.xml")
}
